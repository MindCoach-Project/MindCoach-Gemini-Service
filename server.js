import express from "express";
import dotenv from "dotenv";
import axios from "axios";
import cors from "cors"; 

dotenv.config();

const app = express();
app.use(express.json());
app.use(cors()); 

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const MODEL_ID = "tunedModels/create-task-final-8s182o5t6vu7";

app.post("/api/gemini", async (req, res) => {
  if (!GEMINI_API_KEY) {
    return res.status(500).json({ error: "API Key kh√¥ng h·ª£p l·ªá" });
  }

  console.log("‚úÖ API nh·∫≠n request:", req.body);

  try {
    const { text } = req.body;

    const prompt = `B·∫°n l√† m·ªôt AI tr·ª£ l√Ω gi√∫p tr√≠ch xu·∫•t th√¥ng tin nhi·ªám v·ª• t·ª´ c√¢u n√≥i c·ªßa ng∆∞·ªùi d√πng. 
    H√£y ph√¢n t√≠ch c√¢u sau v√† lu√¥n tr·∫£ v·ªÅ JSON v·ªõi ƒë·ªãnh d·∫°ng ch√≠nh x√°c:
    {
      "title": "<T√™n nhi·ªám v·ª•>",
      "startTime": "<yyyy-mm-dd HH:mm:ss>",
      "endTime": "<yyyy-mm-dd HH:mm:ss>"
    }
    C√¢u n√≥i c·ªßa ng∆∞·ªùi d√πng: "${text}"
    Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng k√®m theo b·∫•t k·ª≥ vƒÉn b·∫£n n√†o kh√°c.`;

    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/${MODEL_ID}:generateContent?key=${GEMINI_API_KEY}`,
      {
        contents: [{ parts: [{ text: prompt }] }],
      }
    );


    try {
      let rawText = response.data.candidates[0]?.content.parts[0]?.text || "{}";

      rawText = rawText.replace(/```json\n?/, "").replace(/\n?```/, "").trim();

      const extractedData = JSON.parse(rawText);

      if (!extractedData.title || !extractedData.startTime || !extractedData.endTime) {
        throw new Error("D·ªØ li·ªáu kh√¥ng ƒë·ªß tr∆∞·ªùng c·∫ßn thi·∫øt.");
      }

      res.status(200).json(extractedData);
    } catch (parseError) {
      res.status(500).json({ error: "D·ªØ li·ªáu ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ Gemini" });
    }
  } catch (error) {
    res.status(500).json({ error: "L·ªói khi g·ªçi Gemini API" });
  }
});

const PORT = 5001;
app.listen(PORT, () => console.log(`üöÄ Server ch·∫°y t·∫°i http://localhost:${PORT}`));
